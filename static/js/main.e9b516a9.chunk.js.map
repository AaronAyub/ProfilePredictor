{"version":3,"sources":["services/queryAge.tsx","services/queryGender.tsx","services/queryCountry.tsx","services/countryList.tsx","services/countryTools.tsx","services/sendQuery.tsx","components/Query.tsx","components/Summary.tsx","components/CountryGraph.tsx","App.tsx","components/Header.tsx","components/Footer.tsx","index.tsx"],"names":["queryAge","name","country","a","request","fetch","response","ok","json","age","count","queryGender","gender","probability","queryCountry","countryList","codeToName","code","i","countries","length","predict","ageStat","genderStat","countryStat","countryJson","map","entry","country_id","Math","round","genderProbability","useStyles","makeStyles","theme","submitButton","marginTop","Query","props","classes","useState","setName","setCountry","nameError","setNameError","countryError","setCountryError","nameText","setNameText","countryText","setCountryText","sort","b","localeCompare","handleChangeCountry","event","target","value","RenderInstructions","hasProfile","Box","className","TextField","fullWidth","error","helperText","onChange","label","Autocomplete","options","inputValue","onInputChange","newInputValue","freeSolo","getOptionLabel","option","renderOption","Fragment","renderInput","params","Button","onClick","countryCode","toUpperCase","hasCountry","variant","color","paper","padding","spacing","backgroundColor","palette","background","default","text","secondary","fontSize","summaryTitle","marginBottom","Summary","RenderAge","profile","RenderGender","RenderCountry","Typography","align","Grid","container","item","xs","md","Paper","CountryGraph","data","setData","colors","useEffect","remainingPercent","forEach","push","justifyContent","PieChart","height","width","Pie","dataKey","nameKey","index","Cell","fill","Legend","Tooltip","App","setProfile","progress","setProgress","first","setFirst","sendQuery","RenderProgress","CircularProgress","RenderSummary","RenderCountryGraph","lg","xl","Header","anchorEl","setAnchorEl","open","setOpen","handleApiClose","handleAboutClose","AppBar","Toolbar","currentTarget","href","Dialog","onClose","DialogTitle","id","Container","Link","Divider","DialogActions","Menu","keepMounted","Boolean","MenuItem","Footer","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.e9b516a9.chunk.js","sourcesContent":["import AgeStat from '../interfaces/AgeStat'\n\n/* Queries agify.io for a prediction on age, given a name. */\nconst queryAge = async (name: string, country: string | null): Promise<AgeStat> => {\n    let request: string = \"https://api.agify.io\"\n    request += \"?name=\" + name // Add the name given by the user to the URL\n    if (country) request += \"&country_id=\" + country // If the user entered a country, add that to the URL\n\n    // Send the GET request, and return the json given back\n    let response = await fetch(request)\n    if (response.ok) {\n        return await response.json()\n    }\n    return {\n        age: null,\n        count: -1\n    }\n}\n\nexport default queryAge","import GenderStat from '../interfaces/GenderStat'\n\n/* Queries genderize.io for a prediction on gender, given a name. */\nconst queryGender = async (name: string, country: string | null): Promise<GenderStat> => {\n    let request: string = \"https://api.genderize.io\"\n    request += \"?name=\" + name // Add the name given by the user to the URL\n    if (country) request += \"&country_id=\" + country // If the user entered a country, add that to the URL\n\n    // Send the GET request, and return the json given back\n    let response = await fetch(request)\n    if (response.ok) {\n        return await response.json()\n    }\n    return {\n        gender: null,\n        probability: -1,\n        count: -1\n    }\n}\n\nexport default queryGender","import CountryStat from '../interfaces/CountryStat'\n\n\n/* Queries nationalize for a list of countries which a name might belong to. */\nconst queryCountry = async (name: string): Promise<CountryStat> => {\n    let request: string = \"https://api.nationalize.io\"\n    request += \"?name=\" + name // Add the name given by the user to the URL\n\n    // Send the GET request, and return the json given back\n    let response = await fetch(request)\n    if (response.ok) {\n        return await response.json()\n    }\n    return {country: []}\n}\n\nexport default queryCountry","const countryList = [\n    {\"code\": \"AD\", \"name\": \"Andorra\"},\n    {\"code\": \"AE\", \"name\": \"United Arab Emirates\"},\n    {\"code\": \"AF\", \"name\": \"Afghanistan\"},\n    {\"code\": \"AG\", \"name\": \"Antigua and Barbuda\"},\n    {\"code\": \"AI\", \"name\": \"Anguilla\"},\n    {\"code\": \"AL\", \"name\": \"Albania\"},\n    {\"code\": \"AM\", \"name\": \"Armenia\"},\n    {\"code\": \"AO\", \"name\": \"Angola\"},\n    {\"code\": \"AQ\", \"name\": \"Antarctica\"},\n    {\"code\": \"AR\", \"name\": \"Argentina\"},\n    {\"code\": \"AS\", \"name\": \"American Samoa\"},\n    {\"code\": \"AT\", \"name\": \"Austria\"},\n    {\"code\": \"AU\", \"name\": \"Australia\"},\n    {\"code\": \"AW\", \"name\": \"Aruba\"},\n    {\"code\": \"AX\", \"name\": \"Åland Islands\"},\n    {\"code\": \"AZ\", \"name\": \"Azerbaijan\"},\n    {\"code\": \"BA\", \"name\": \"Bosnia and Herzegovina\"},\n    {\"code\": \"BB\", \"name\": \"Barbados\"},\n    {\"code\": \"BD\", \"name\": \"Bangladesh\"},\n    {\"code\": \"BE\", \"name\": \"Belgium\"},\n    {\"code\": \"BF\", \"name\": \"Burkina Faso\"},\n    {\"code\": \"BG\", \"name\": \"Bulgaria\"},\n    {\"code\": \"BH\", \"name\": \"Bahrain\"},\n    {\"code\": \"BI\", \"name\": \"Burundi\"},\n    {\"code\": \"BJ\", \"name\": \"Benin\"},\n    {\"code\": \"BL\", \"name\": \"Saint Barthélemy\"},\n    {\"code\": \"BM\", \"name\": \"Bermuda\"},\n    {\"code\": \"BN\", \"name\": \"Brunei Darussalam\"},\n    {\"code\": \"BO\", \"name\": \"Bolivia (Plurinational State of)\"},\n    {\"code\": \"BQ\", \"name\": \"Bonaire, Sint Eustatius and Saba\"},\n    {\"code\": \"BR\", \"name\": \"Brazil\"},\n    {\"code\": \"BS\", \"name\": \"Bahamas\"},\n    {\"code\": \"BT\", \"name\": \"Bhutan\"},\n    {\"code\": \"BV\", \"name\": \"Bouvet Island\"},\n    {\"code\": \"BW\", \"name\": \"Botswana\"},\n    {\"code\": \"BY\", \"name\": \"Belarus\"},\n    {\"code\": \"BZ\", \"name\": \"Belize\"},\n    {\"code\": \"CA\", \"name\": \"Canada\"},\n    {\"code\": \"CC\", \"name\": \"Cocos (Keeling) Islands\"},\n    {\"code\": \"CD\", \"name\": \"Congo, Democratic Republic of the\"},\n    {\"code\": \"CF\", \"name\": \"Central African Republic\"},\n    {\"code\": \"CG\", \"name\": \"Congo\"},\n    {\"code\": \"CH\", \"name\": \"Switzerland\"},\n    {\"code\": \"CI\", \"name\": \"Côte d'Ivoire\"},\n    {\"code\": \"CK\", \"name\": \"Cook Islands\"},\n    {\"code\": \"CL\", \"name\": \"Chile\"},\n    {\"code\": \"CM\", \"name\": \"Cameroon\"},\n    {\"code\": \"CN\", \"name\": \"China\"},\n    {\"code\": \"CO\", \"name\": \"Colombia\"},\n    {\"code\": \"CR\", \"name\": \"Costa Rica\"},\n    {\"code\": \"CU\", \"name\": \"Cuba\"},\n    {\"code\": \"CV\", \"name\": \"Cabo Verde\"},\n    {\"code\": \"CW\", \"name\": \"Curaçao\"},\n    {\"code\": \"CX\", \"name\": \"Christmas Island\"},\n    {\"code\": \"CY\", \"name\": \"Cyprus\"},\n    {\"code\": \"CZ\", \"name\": \"Czechia\"},\n    {\"code\": \"DE\", \"name\": \"Germany\"},\n    {\"code\": \"DJ\", \"name\": \"Djibouti\"},\n    {\"code\": \"DK\", \"name\": \"Denmark\"},\n    {\"code\": \"DM\", \"name\": \"Dominica\"},\n    {\"code\": \"DO\", \"name\": \"Dominican Republic\"},\n    {\"code\": \"DZ\", \"name\": \"Algeria\"},\n    {\"code\": \"EC\", \"name\": \"Ecuador\"},\n    {\"code\": \"EE\", \"name\": \"Estonia\"},\n    {\"code\": \"EG\", \"name\": \"Egypt\"},\n    {\"code\": \"EH\", \"name\": \"Western Sahara\"},\n    {\"code\": \"ER\", \"name\": \"Eritrea\"},\n    {\"code\": \"ES\", \"name\": \"Spain\"},\n    {\"code\": \"ET\", \"name\": \"Ethiopia\"},\n    {\"code\": \"FI\", \"name\": \"Finland\"},\n    {\"code\": \"FJ\", \"name\": \"Fiji\"},\n    {\"code\": \"FK\", \"name\": \"Falkland Islands (Malvinas)\"},\n    {\"code\": \"FM\", \"name\": \"Micronesia (Federated States of)\"},\n    {\"code\": \"FO\", \"name\": \"Faroe Islands\"},\n    {\"code\": \"FR\", \"name\": \"France\"},\n    {\"code\": \"GA\", \"name\": \"Gabon\"},\n    {\"code\": \"GB\", \"name\": \"United Kingdom of Great Britain and Northern Ireland\"},\n    {\"code\": \"GD\", \"name\": \"Grenada\"},\n    {\"code\": \"GE\", \"name\": \"Georgia\"},\n    {\"code\": \"GF\", \"name\": \"French Guiana\"},\n    {\"code\": \"GG\", \"name\": \"Guernsey\"},\n    {\"code\": \"GH\", \"name\": \"Ghana\"},\n    {\"code\": \"GI\", \"name\": \"Gibraltar\"},\n    {\"code\": \"GL\", \"name\": \"Greenland\"},\n    {\"code\": \"GM\", \"name\": \"Gambia\"},\n    {\"code\": \"GN\", \"name\": \"Guinea\"},\n    {\"code\": \"GP\", \"name\": \"Guadeloupe\"},\n    {\"code\": \"GQ\", \"name\": \"Equatorial Guinea\"},\n    {\"code\": \"GR\", \"name\": \"Greece\"},\n    {\"code\": \"GS\", \"name\": \"South Georgia and the South Sandwich Islands\"},\n    {\"code\": \"GT\", \"name\": \"Guatemala\"},\n    {\"code\": \"GU\", \"name\": \"Guam\"},\n    {\"code\": \"GW\", \"name\": \"Guinea-Bissau\"},\n    {\"code\": \"GY\", \"name\": \"Guyana\"},\n    {\"code\": \"HK\", \"name\": \"Hong Kong\"},\n    {\"code\": \"HM\", \"name\": \"Heard Island and McDonald Islands\"},\n    {\"code\": \"HN\", \"name\": \"Honduras\"},\n    {\"code\": \"HR\", \"name\": \"Croatia\"},\n    {\"code\": \"HT\", \"name\": \"Haiti\"},\n    {\"code\": \"HU\", \"name\": \"Hungary\"},\n    {\"code\": \"ID\", \"name\": \"Indonesia\"},\n    {\"code\": \"IE\", \"name\": \"Ireland\"},\n    {\"code\": \"IL\", \"name\": \"Israel\"},\n    {\"code\": \"IM\", \"name\": \"Isle of Man\"},\n    {\"code\": \"IN\", \"name\": \"India\"},\n    {\"code\": \"IO\", \"name\": \"British Indian Ocean Territory\"},\n    {\"code\": \"IQ\", \"name\": \"Iraq\"},\n    {\"code\": \"IR\", \"name\": \"Iran (Islamic Republic of)\"},\n    {\"code\": \"IS\", \"name\": \"Iceland\"},\n    {\"code\": \"IT\", \"name\": \"Italy\"},\n    {\"code\": \"JE\", \"name\": \"Jersey\"},\n    {\"code\": \"JM\", \"name\": \"Jamaica\"},\n    {\"code\": \"JO\", \"name\": \"Jordan\"},\n    {\"code\": \"JP\", \"name\": \"Japan\"},\n    {\"code\": \"KE\", \"name\": \"Kenya\"},\n    {\"code\": \"KG\", \"name\": \"Kyrgyzstan\"},\n    {\"code\": \"KH\", \"name\": \"Cambodia\"},\n    {\"code\": \"KI\", \"name\": \"Kiribati\"},\n    {\"code\": \"KM\", \"name\": \"Comoros\"},\n    {\"code\": \"KN\", \"name\": \"Saint Kitts and Nevis\"},\n    {\"code\": \"KP\", \"name\": \"Korea (Democratic People's Republic of)\"},\n    {\"code\": \"KR\", \"name\": \"Korea, Republic of\"},\n    {\"code\": \"KW\", \"name\": \"Kuwait\"},\n    {\"code\": \"KY\", \"name\": \"Cayman Islands\"},\n    {\"code\": \"KZ\", \"name\": \"Kazakhstan\"},\n    {\"code\": \"LA\", \"name\": \"Lao People's Democratic Republic\"},\n    {\"code\": \"LB\", \"name\": \"Lebanon\"},\n    {\"code\": \"LC\", \"name\": \"Saint Lucia\"},\n    {\"code\": \"LI\", \"name\": \"Liechtenstein\"},\n    {\"code\": \"LK\", \"name\": \"Sri Lanka\"},\n    {\"code\": \"LR\", \"name\": \"Liberia\"},\n    {\"code\": \"LS\", \"name\": \"Lesotho\"},\n    {\"code\": \"LT\", \"name\": \"Lithuania\"},\n    {\"code\": \"LU\", \"name\": \"Luxembourg\"},\n    {\"code\": \"LV\", \"name\": \"Latvia\"},\n    {\"code\": \"LY\", \"name\": \"Libya\"},\n    {\"code\": \"MA\", \"name\": \"Morocco\"},\n    {\"code\": \"MC\", \"name\": \"Monaco\"},\n    {\"code\": \"MD\", \"name\": \"Moldova, Republic of\"},\n    {\"code\": \"ME\", \"name\": \"Montenegro\"},\n    {\"code\": \"MF\", \"name\": \"Saint Martin (French part)\"},\n    {\"code\": \"MG\", \"name\": \"Madagascar\"},\n    {\"code\": \"MH\", \"name\": \"Marshall Islands\"},\n    {\"code\": \"MK\", \"name\": \"North Macedonia\"},\n    {\"code\": \"ML\", \"name\": \"Mali\"},\n    {\"code\": \"MM\", \"name\": \"Myanmar\"},\n    {\"code\": \"MN\", \"name\": \"Mongolia\"},\n    {\"code\": \"MO\", \"name\": \"Macao\"},\n    {\"code\": \"MP\", \"name\": \"Northern Mariana Islands\"},\n    {\"code\": \"MQ\", \"name\": \"Martinique\"},\n    {\"code\": \"MR\", \"name\": \"Mauritania\"},\n    {\"code\": \"MS\", \"name\": \"Montserrat\"},\n    {\"code\": \"MT\", \"name\": \"Malta\"},\n    {\"code\": \"MU\", \"name\": \"Mauritius\"},\n    {\"code\": \"MV\", \"name\": \"Maldives\"},\n    {\"code\": \"MW\", \"name\": \"Malawi\"},\n    {\"code\": \"MX\", \"name\": \"Mexico\"},\n    {\"code\": \"MY\", \"name\": \"Malaysia\"},\n    {\"code\": \"MZ\", \"name\": \"Mozambique\"},\n    {\"code\": \"NA\", \"name\": \"Namibia\"},\n    {\"code\": \"NC\", \"name\": \"New Caledonia\"},\n    {\"code\": \"NE\", \"name\": \"Niger\"},\n    {\"code\": \"NF\", \"name\": \"Norfolk Island\"},\n    {\"code\": \"NG\", \"name\": \"Nigeria\"},\n    {\"code\": \"NI\", \"name\": \"Nicaragua\"},\n    {\"code\": \"NL\", \"name\": \"Netherlands\"},\n    {\"code\": \"NO\", \"name\": \"Norway\"},\n    {\"code\": \"NP\", \"name\": \"Nepal\"},\n    {\"code\": \"NR\", \"name\": \"Nauru\"},\n    {\"code\": \"NU\", \"name\": \"Niue\"},\n    {\"code\": \"NZ\", \"name\": \"New Zealand\"},\n    {\"code\": \"OM\", \"name\": \"Oman\"},\n    {\"code\": \"PA\", \"name\": \"Panama\"},\n    {\"code\": \"PE\", \"name\": \"Peru\"},\n    {\"code\": \"PF\", \"name\": \"French Polynesia\"},\n    {\"code\": \"PG\", \"name\": \"Papua New Guinea\"},\n    {\"code\": \"PH\", \"name\": \"Philippines\"},\n    {\"code\": \"PK\", \"name\": \"Pakistan\"},\n    {\"code\": \"PL\", \"name\": \"Poland\"},\n    {\"code\": \"PM\", \"name\": \"Saint Pierre and Miquelon\"},\n    {\"code\": \"PN\", \"name\": \"Pitcairn\"},\n    {\"code\": \"PR\", \"name\": \"Puerto Rico\"},\n    {\"code\": \"PS\", \"name\": \"Palestine, State of\"},\n    {\"code\": \"PT\", \"name\": \"Portugal\"},\n    {\"code\": \"PW\", \"name\": \"Palau\"},\n    {\"code\": \"PY\", \"name\": \"Paraguay\"},\n    {\"code\": \"QA\", \"name\": \"Qatar\"},\n    {\"code\": \"RE\", \"name\": \"Réunion\"},\n    {\"code\": \"RO\", \"name\": \"Romania\"},\n    {\"code\": \"RS\", \"name\": \"Serbia\"},\n    {\"code\": \"RU\", \"name\": \"Russian Federation\"},\n    {\"code\": \"RW\", \"name\": \"Rwanda\"},\n    {\"code\": \"SA\", \"name\": \"Saudi Arabia\"},\n    {\"code\": \"SB\", \"name\": \"Solomon Islands\"},\n    {\"code\": \"SC\", \"name\": \"Seychelles\"},\n    {\"code\": \"SD\", \"name\": \"Sudan\"},\n    {\"code\": \"SE\", \"name\": \"Sweden\"},\n    {\"code\": \"SG\", \"name\": \"Singapore\"},\n    {\"code\": \"SH\", \"name\": \"Saint Helena, Ascension and Tristan da Cunha\"},\n    {\"code\": \"SI\", \"name\": \"Slovenia\"},\n    {\"code\": \"SJ\", \"name\": \"Svalbard and Jan Mayen\"},\n    {\"code\": \"SK\", \"name\": \"Slovakia\"},\n    {\"code\": \"SL\", \"name\": \"Sierra Leone\"},\n    {\"code\": \"SM\", \"name\": \"San Marino\"},\n    {\"code\": \"SN\", \"name\": \"Senegal\"},\n    {\"code\": \"SO\", \"name\": \"Somalia\"},\n    {\"code\": \"SR\", \"name\": \"Suriname\"},\n    {\"code\": \"SS\", \"name\": \"South Sudan\"},\n    {\"code\": \"ST\", \"name\": \"Sao Tome and Principe\"},\n    {\"code\": \"SV\", \"name\": \"El Salvador\"},\n    {\"code\": \"SX\", \"name\": \"Sint Maarten (Dutch part)\"},\n    {\"code\": \"SY\", \"name\": \"Syrian Arab Republic\"},\n    {\"code\": \"SZ\", \"name\": \"Eswatini\"},\n    {\"code\": \"TC\", \"name\": \"Turks and Caicos Islands\"},\n    {\"code\": \"TD\", \"name\": \"Chad\"},\n    {\"code\": \"TF\", \"name\": \"French Southern Territories\"},\n    {\"code\": \"TG\", \"name\": \"Togo\"},\n    {\"code\": \"TH\", \"name\": \"Thailand\"},\n    {\"code\": \"TJ\", \"name\": \"Tajikistan\"},\n    {\"code\": \"TK\", \"name\": \"Tokelau\"},\n    {\"code\": \"TL\", \"name\": \"Timor-Leste\"},\n    {\"code\": \"TM\", \"name\": \"Turkmenistan\"},\n    {\"code\": \"TN\", \"name\": \"Tunisia\"},\n    {\"code\": \"TO\", \"name\": \"Tonga\"},\n    {\"code\": \"TR\", \"name\": \"Turkey\"},\n    {\"code\": \"TT\", \"name\": \"Trinidad and Tobago\"},\n    {\"code\": \"TV\", \"name\": \"Tuvalu\"},\n    {\"code\": \"TW\", \"name\": \"Taiwan, Province of China\"},\n    {\"code\": \"TZ\", \"name\": \"Tanzania, United Republic of\"},\n    {\"code\": \"UA\", \"name\": \"Ukraine\"},\n    {\"code\": \"UG\", \"name\": \"Uganda\"},\n    {\"code\": \"UM\", \"name\": \"United States Minor Outlying Islands\"},\n    {\"code\": \"US\", \"name\": \"United States of America\"},\n    {\"code\": \"UY\", \"name\": \"Uruguay\"},\n    {\"code\": \"UZ\", \"name\": \"Uzbekistan\"},\n    {\"code\": \"VA\", \"name\": \"Holy See\"},\n    {\"code\": \"VC\", \"name\": \"Saint Vincent and the Grenadines\"},\n    {\"code\": \"VE\", \"name\": \"Venezuela (Bolivarian Republic of)\"},\n    {\"code\": \"VG\", \"name\": \"Virgin Islands (British)\"},\n    {\"code\": \"VI\", \"name\": \"Virgin Islands (U.S.)\"},\n    {\"code\": \"VN\", \"name\": \"Viet Nam\"},\n    {\"code\": \"VU\", \"name\": \"Vanuatu\"},\n    {\"code\": \"WF\", \"name\": \"Wallis and Futuna\"},\n    {\"code\": \"WS\", \"name\": \"Samoa\"},\n    {\"code\": \"YE\", \"name\": \"Yemen\"},\n    {\"code\": \"YT\", \"name\": \"Mayotte\"},\n    {\"code\": \"ZA\", \"name\": \"South Africa\"},\n    {\"code\": \"ZM\", \"name\": \"Zambia\"},\n    {\"code\": \"ZW\", \"name\": \"Zimbabwe\"}\n]\nexport default countryList","// Helper functions using the countryList json.\nimport countries from './countryList'\n\n// Converts a country code to it's name if possible.\n// If the code is valid, this returns a name. Otherwise, it returns the unmodified code.\nconst codeToName = (code: string): string => {\n    for (let i = 0; i < countries.length; i++) {\n        if (countries[i].code === code) return countries[i].name\n    }\n    return code\n}\n\n/* Checks if the user-provided country is in the country list.\nReturns the country code. If the country isn't found, returns a blank code. */\nconst hasCountry = (country: string): string | null => {\n    for (let i = 0; i < countries.length; i++) {\n        // If the user provided a valid country or country code (case-insensitive), return the matching code\n        if (countries[i].code === country.toUpperCase() || countries[i].name.toUpperCase() === country.toUpperCase()) return countries[i].code\n    }\n    // If the user provided neither a valid code or country name, return null\n    return null\n}\n\nexport {codeToName, hasCountry}","import Profile from '../interfaces/Profile'\nimport AgeStat from '../interfaces/AgeStat'\nimport GenderStat from '../interfaces/GenderStat'\nimport CountryStat from '../interfaces/CountryStat'\n\nimport queryAge from './queryAge'\nimport queryGender from './queryGender'\nimport queryCountry from './queryCountry'\nimport { codeToName } from './countryTools'\n\n// Queries the APIs for all requested metrics to return a profile prediction\nconst predict = async (name: string, country: string | null): Promise<Profile> => {\n    let ageStat: AgeStat = await queryAge(name, country)\n    let genderStat: GenderStat = await queryGender(name, country)\n    let countryStat: string | null | {country_id: string, probability: number}[] = null\n    \n    // Do not predict the country if the user has already provided the country.\n    if (!country) {\n        let countryJson: CountryStat = await queryCountry(name)\n        countryStat = countryJson.country\n    }\n    else { // If the user has provided a country, just use that for the profile's country\n        countryStat = country\n    }\n\n    if (countryStat) {\n        if (typeof(countryStat) === \"string\") {\n            countryStat = codeToName(countryStat)\n        }\n        else {\n            countryStat = countryStat.map((entry) => {\n                entry = {\n                    country_id: codeToName(entry.country_id),\n                    probability: Math.round(entry.probability * 10000) / 100\n                }\n                return entry\n            })\n        }\n    }\n\n    return {\n        name: name,\n        age: ageStat.age,\n        gender: genderStat.gender,\n        genderProbability: genderStat.probability * 100,\n        country: countryStat\n    }\n}\n\nexport default predict","import { makeStyles, Button, TextField, Box } from '@material-ui/core'\nimport React, { useState } from 'react'\nimport { hasCountry } from '../services/countryTools'\nimport countries from '../services/countryList'\nimport { Autocomplete } from '@material-ui/lab'\n\ntype predict = (name: string, country: string | null) => void\ninterface QueryProps {\n    predict: predict\n    hasProfile: boolean\n}\n\nconst useStyles = makeStyles ((theme) => ({\n    submitButton: {\n        marginTop: '1rem'\n    }\n}))\n\n// The Query component allows the user to query the APIs to create a prediction.\nconst Query = (props: QueryProps): JSX.Element => {\n    const classes = useStyles()\n\n    const [name, setName] = useState<string>(\"\")\n    const [country, setCountry] = useState<string>(\"\")\n    const [nameError, setNameError] = useState<boolean>(false)\n    const [countryError, setCountryError] = useState<boolean>(false)\n    const [nameText, setNameText] = useState<string>(\"\")\n    const [countryText, setCountryText] = useState<string>(\"\")\n\n    // Sort the countries by name for the query module, as it is more user-friendly than sorting by country-code.\n    countries.sort((a,b) => a.name.localeCompare(b.name))\n\n    const handleChangeName = (event: React.ChangeEvent<HTMLInputElement>) => {\n        setName(event.target.value)\n    }\n    const handleChangeCountry = (event: React.ChangeEvent<HTMLInputElement>) => {\n        setCountry(event.target.value)\n    }\n    const handleSubmit = () => {\n        // Check that the user has entered a name\n        if (!name) {\n            setNameError(true)\n            setNameText(\"Please enter a first name.\")\n        }\n        else {\n            setNameError(false)\n            setNameText(\"\")\n        }\n\n        // Check that the user entered a valid country or country code\n        let countryCode: string | null = null\n        if (country) {\n            countryCode = hasCountry(country)\n            if (!countryCode) {\n                setCountryError(true)\n                setCountryText(\"Sorry, do not have data on this country.\")\n                return\n            }\n            else {\n                setCountryError(false)\n                setCountryText(\"\")\n            }\n        }\n\n        // If there are no errors, send the prediction query.\n        if (name && countryCode !== \"\") {\n            props.predict(name,countryCode)\n            setName(\"\")\n            setCountry(\"\")\n        }\n    }\n\n    // Shows different instructions depending on whether the user has entered a profile or not\n    const RenderInstructions = () => {\n        if (props.hasProfile) {\n            return (\n                <div>\n                    Would you like to make another prediction?\n                </div>\n            )\n        }\n        return (\n            <div>\n                Enter a name and press \"Submit\" to guess a person's profile.\n                <br/>You can also specify the country or two-letter country code for more accurate results.\n            </div>\n        )\n    }\n\n    return (\n        <Box className=\"query\">\n            <RenderInstructions />\n            <TextField fullWidth error={nameError} helperText={nameText} value={name} onChange={handleChangeName} name=\"name\" label=\"First Name\"/>\n            \n            <Autocomplete\n            options={countries as {code: string, name: string}[]}\n            inputValue={country}\n            onInputChange={(event:React.ChangeEvent<{}>, newInputValue:string) => {\n                setCountry(newInputValue)\n            }}\n            freeSolo // Prevent the autocompletion from overwriting invalid user responses.\n            getOptionLabel={(option) => option.name}\n            renderOption={(option) => (\n                <React.Fragment>\n                    {option.name} ({option.code})\n                </React.Fragment>\n            )}\n            renderInput={(params) => (\n                <TextField\n                    {...params}\n                    name=\"country\"\n                    onChange={handleChangeCountry}\n                    error={countryError}\n                    helperText={countryText}\n                    value={country}\n                    label=\"Country (Optional)\"\n                />\n            )}\n            />\n            \n            <Button className={classes.submitButton} onClick={handleSubmit} variant=\"contained\" color=\"primary\">Predict</Button>\n        </Box>\n    )\n}\n\nexport default Query","import React from 'react'\nimport { makeStyles, Grid, Paper, Typography } from '@material-ui/core'\nimport Profile from '../interfaces/Profile'\n\ninterface SummaryProps {\n    profile: Profile\n}\n\nconst useStyles = makeStyles((theme) => ({\n    paper: {\n        padding: theme.spacing(2),\n        backgroundColor: theme.palette.background.default\n    },\n    probability: {\n        color: theme.palette.text.secondary,\n        fontSize: 14\n    },\n    summaryTitle: {\n        marginBottom: \"1.5rem\"\n    }\n}))\n\n// A textual summary of a profile\nconst Summary = (props: SummaryProps): JSX.Element => {\n    const classes = useStyles()\n\n    // Display the predicted age if possible\n    const RenderAge = () => {\n        if (!props.profile.age) {\n            return <React.Fragment>No information on age was found.</React.Fragment>\n        }\n        return <React.Fragment>Predicted Age: {props.profile.age}</React.Fragment>\n    }\n\n    // Display the predicted gender and accuracy if possible\n    const RenderGender = () => {\n        if (!props.profile.gender) {\n            return <React.Fragment>No information on gender was found.</React.Fragment>\n        }\n        return (\n            <React.Fragment>\n                Predicted Gender: {props.profile.gender}\n                <div className={classes.probability}>\n                    Probability: {props.profile.genderProbability} %\n                </div>\n            </React.Fragment>\n        )\n    }\n\n    /* Displays the predicted country if the user didn't provide one.\n    Alternatively, displays the country the user provided one. */\n    const RenderCountry = () => {\n        if (!props.profile.country) {\n            return <React.Fragment>There was an error predicting the country.</React.Fragment>\n        }\n        else if (typeof(props.profile.country) === \"string\") {\n            return <React.Fragment>Specified Country: {props.profile.country}</React.Fragment>\n        }\n        if (props.profile.country.length === 0) {\n            return <React.Fragment>No information on country was found.</React.Fragment>\n        }\n        return (\n            <React.Fragment>\n                Predicted Country: {props.profile.country[0].country_id}\n                <div className={classes.probability}>\n                    Probability: {props.profile.country[0].probability} %\n                </div>\n                {/* <div>\n                    Most Likely Countries:\n                    <ul>\n                        {list.map((obj:{country_id: string, probability: number}, index: number) => (\n                            <li key={obj.country_id}>\n                                {index + 1}. {obj.country_id}: {obj.probability} %\n                            </li>\n                        ))}\n                    </ul>\n                </div> */}\n            </React.Fragment>\n        )\n    }\n\n    return <React.Fragment>\n        <Typography align=\"center\" variant=\"h5\" className={classes.summaryTitle}>\n                Prediction Results\n        </Typography>\n        <Grid container spacing={3}>\n            <Grid item xs={6} md={12}>\n                <Paper className={classes.paper}>\n                    Name: {props.profile.name}\n                </Paper>\n            </Grid>\n            <Grid item xs={6} md={12}>\n                <Paper className={classes.paper}>\n                    <RenderAge />\n                </Paper>\n            </Grid>\n            <Grid item xs={6} md={12}>\n                <Paper className={classes.paper}>\n                    <RenderGender />\n                </Paper>\n            </Grid>\n            <Grid item xs={6} md={12}>\n                <Paper className={classes.paper}>\n                    <RenderCountry />\n                </Paper>\n            </Grid>\n        </Grid>\n    </React.Fragment>\n}\n\nexport default Summary","import Countries from '../interfaces/Countries'\nimport { PieChart, Pie, Cell, Legend, Tooltip } from 'recharts'\nimport React, { useState, useEffect } from 'react'\nimport { Typography, Grid } from '@material-ui/core'\n\ninterface CountryGraphProps {\n    countries: Countries\n}\n\nconst CountryGraph = (props: CountryGraphProps): JSX.Element => {\n    const [data, setData] = useState<{name: string; value: number;}[]>([])\n\n    const colors = [\n        \"#1769aa\",\n        \"#f50057\",\n        \"#00a152\",\n        \"#ffa000\"\n    ]\n    \n    useEffect(() => {\n        let remainingPercent: number = 100 // This will end as the percent that a person does not belong to any of the listed countries\n        let data = [] // The used in the graph\n        \n        // Add each country to the graph\n        props.countries.forEach((entry) => {\n            remainingPercent-= entry.probability\n            data.push({\n                name: entry.country_id,\n                value: entry.probability\n            })\n        })\n\n        // Add the \"Other\" entry to the graph\n        data.push({\n            name: 'Other',\n            value: Math.round(remainingPercent * 100) / 100\n        })\n        setData(data)\n    },[props.countries])\n    \n    return (\n        <React.Fragment>\n            <Typography align=\"center\" variant=\"h5\">\n                Countries by Probability\n            </Typography>\n            <Grid container justifyContent=\"center\">\n                <PieChart\n                height={500}\n                width={500}\n                >\n                    <Pie data={data}\n                    dataKey=\"value\"\n                    nameKey=\"name\"\n                    label={true}>\n                        {data.map((entry, index) => (\n                            <Cell key={index} fill={colors[index % colors.length]}/>\n                        ))}\n                    </Pie>\n                    <Legend />\n                    <Tooltip />\n                </PieChart>\n            </Grid>\n        </React.Fragment>\n    )\n\n}\n\nexport default CountryGraph","import React, { useState } from 'react'\nimport { Typography, CircularProgress, Grid } from '@material-ui/core'\nimport Profile from './interfaces/Profile'\nimport sendQuery from \"./services/sendQuery\"\n\nimport Query from './components/Query'\nimport Summary from './components/Summary'\nimport CountryGraph from './components/CountryGraph'\nimport \"./App.css\"\n\nconst App = (): JSX.Element => {\n    const [profile, setProfile] = useState<Profile | null>(null)\n    const [progress, setProgress] = useState<boolean>(false) // Set to true a query is in progress\n    const [first, setFirst] = useState<boolean>(false) // Set to true if the user has made their first prediction\n\n    // Create a profile prediction based on the name and country provided by the user\n    const predict = async (name: string, country: string | null) => {\n        setProfile(null)\n        setProgress(true)\n        setProfile(await sendQuery(name,country))\n        setProgress(false)\n        setFirst(true)\n    }\n\n    // Indicate to the user that a query is in progress.\n    const RenderProgress = () => {\n        if (progress) {\n            return (\n                <React.Fragment>\n                    <Grid item xs={5}></Grid>\n                    <Grid item xs={2}>\n                        <CircularProgress />\n                    </Grid>\n                    <Grid item xs={5}></Grid>\n                </React.Fragment>\n            )\n        }\n        return <React.Fragment></React.Fragment>\n    }\n\n    // Render the summary object only if a profile exists.\n    const RenderSummary = () => {\n        if (profile) {\n            return <Summary profile={profile} />\n        }\n        return <React.Fragment></React.Fragment>\n    }\n\n    // Returns true if a profile has already been created.\n    const hasProfile = () => {\n        if (first) return true\n        else return false\n    }\n\n    // Render the graph of potential countries if a country isn't specified\n    const RenderCountryGraph = () => {\n        if (profile && profile.country && typeof(profile.country) !== \"string\" && profile.country.length > 0) {\n            return <CountryGraph countries={profile.country} />\n        }\n        return <React.Fragment></React.Fragment>\n    }\n\n    return (\n        <div className=\"App\">\n            <Typography align=\"center\" variant=\"h2\" className=\"title\">\n                Profile Predictor\n            </Typography>\n            <Grid justifyContent=\"center\" container spacing={4}>\n                <Grid item xs={8} md={6}>\n                    <Query predict={predict} hasProfile={hasProfile()} />\n                </Grid>\n                <Grid item xs={12}></Grid>\n                <RenderProgress />\n                <Grid item md={6} lg={4} xl={3}>\n                    <RenderSummary />\n                </Grid>\n                <Grid item md={6} lg={4} xl={3}>\n                    <RenderCountryGraph />\n                </Grid>\n            </Grid>\n        </div>\n    );\n}\n\nexport default App;\n","import { Container, Divider, AppBar, Toolbar, Typography, Button, Menu, MenuItem, Link, Dialog, DialogTitle, DialogActions } from '@material-ui/core'\nimport React, { useState } from 'react'\n\nfunction Header (): JSX.Element {\n    const [anchorEl, setAnchorEl] = useState<HTMLElement | null>(null)\n    const [open, setOpen] = useState<boolean>(false)\n\n    // Functions used to open/close the API menu\n    const handleApiOpen = (event: React.MouseEvent<HTMLButtonElement>) => {\n        setAnchorEl(event.currentTarget)\n    }\n    const handleApiClose = () => {\n        setAnchorEl(null)\n    }\n\n    // Functions used to open/close the About dialog\n    const handleAboutOpen = () => {\n        setOpen(true)\n    }\n    const handleAboutClose = () => {\n        setOpen(false)\n    }\n\n    return (\n        <div>\n        <AppBar>\n            <Toolbar className=\"toolbar\" variant=\"dense\">\n                <Typography variant=\"h6\">Profile Predictor</Typography>\n                <div>\n                    <Button color=\"inherit\" aria-controls=\"about\" aria-haspopup=\"true\" onClick={handleAboutOpen}>\n                        About\n                    </Button>\n                    <Button color=\"inherit\" aria-controls=\"apis\" aria-haspopup=\"true\" onClick={handleApiOpen}>\n                        APIs\n                    </Button>\n                    <Button href=\"https://github.com/AaronAyub/ProfilePredictor\" color=\"inherit\">GITHUB</Button>\n                </div>\n            </Toolbar>\n        </AppBar>\n        <Toolbar variant=\"dense\"></Toolbar> {/* This second toolbar is used to take up space and not hide elements of the page. */}\n        \n        {/* A dialog popup with some information on the project. */}\n        <Dialog onClose={handleAboutClose} aria-labelledby=\"aboutTitle\" open={open}>\n            <DialogTitle id=\"aboutTitle\">About</DialogTitle>\n            <Container>\n                <p>Profile Predictor is a web-based interface used to predict certain attributes associated with names.\n                These attributes include age, gender, and nationality.</p>\n                <p>Upon entering a name, the query will return a predicted age, gender, probability of that name being associated with the given gender, and the three most likely countries this name belongs to.</p>\n                <p>You may also narrow down predictions by providing a country. You can either enter a name, or a two-letter ISO 3166-1 alpha country code.</p>\n                <p><Link href=\"https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2#Officially_assigned_code_elements\">List of supported countries and country codes</Link></p>\n                <p>Predictions are performed by querying three APIs,&nbsp;\n                <Link href=\"https://agify.io/\">\n                    agify.io\n                </Link>,&nbsp;\n                <Link href=\"https://genderize.io/\">\n                    genderize.io\n                </Link>, and&nbsp;\n                <Link href=\"https://nationalize.io/\">\n                    nationalize.io\n                </Link>.\n                    These APIs are provided by Demographix ApS.</p>\n            </Container>\n            <Divider/>\n            <DialogTitle id=\"disclaimer\">Disclaimer</DialogTitle>\n            <Container>\n                This website and the developers are not associated with Demografix ApS in any way. Demografix ApS provides public APIs used by this website to make predictions, as noted above. This software does not provide any guarantees regarding the accuracy or completeness of returned predictions.\n                <DialogActions>\n                <Button onClick={handleAboutClose} color=\"primary\">\n                    Okay\n                </Button>\n            </DialogActions>\n            </Container>\n            \n        </Dialog>\n\n        {/* This menu contains links to all apis used. */}\n        <Menu id=\"apis\"\n        anchorEl={anchorEl}\n        keepMounted\n        open={Boolean(anchorEl)}\n        onClose={handleApiClose}>\n            <MenuItem onClick={handleApiClose}>\n                <Link href=\"https://agify.io/\">\n                    agify.io\n                </Link>\n            </MenuItem>\n            <MenuItem onClick={handleApiClose}>\n                <Link href=\"https://genderize.io/\">\n                    genderize.io\n                </Link>\n            </MenuItem>\n            <MenuItem onClick={handleApiClose}>\n                <Link href=\"https://nationalize.io/\">\n                    nationalize.io\n                </Link>\n            </MenuItem>\n        </Menu>\n        </div>\n    )\n}\n\nexport default Header","import { Link } from '@material-ui/core'\n\nfunction Footer (): JSX.Element  {\n    return (\n        <div className=\"footer\">\n            This website is not associated with Demografix ApS, which provides the services used for predictions, nor does it make any guarantees regarding the accuracy or completeness of predictions.&nbsp;\n            <Link href=\"https://github.com/AaronAyub/ProfilePredictor/blob/main/LICENSE\">\n                This software is provided under the MIT License.\n            </Link>\n        </div>\n    )\n}\n\nexport default Footer","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport Header from './components/Header'\nimport Footer from './components/Footer'\nimport \"./App.css\"\n\nReactDOM.render(\n  <React.StrictMode>\n    <div className=\"index\">\n      <Header />\n      <App />\n      <Footer />\n    </div>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}